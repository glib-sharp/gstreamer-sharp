// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Sdp {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct MIKEYPayloadT : IEquatable<MIKEYPayloadT> {

		private IntPtr _pt;
		public Gst.Sdp.MIKEYPayload Pt {
			get {
				return _pt == IntPtr.Zero ? null : (Gst.Sdp.MIKEYPayload) GLib.Opaque.GetOpaque (_pt, typeof (Gst.Sdp.MIKEYPayload), false);
			}
			set {
				_pt = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		public Gst.Sdp.MIKEYTSType Type;
		private IntPtr _ts_value;

		public static Gst.Sdp.MIKEYPayloadT Zero = new Gst.Sdp.MIKEYPayloadT ();

		public static Gst.Sdp.MIKEYPayloadT New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.Sdp.MIKEYPayloadT.Zero;
			return (Gst.Sdp.MIKEYPayloadT) Marshal.PtrToStructure (raw, typeof (Gst.Sdp.MIKEYPayloadT));
		}

		public bool Equals (MIKEYPayloadT other)
		{
			return true && Pt.Equals (other.Pt) && Type.Equals (other.Type) && _ts_value.Equals (other._ts_value);
		}

		public override bool Equals (object other)
		{
			return other is MIKEYPayloadT && Equals ((MIKEYPayloadT) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Pt.GetHashCode () ^ Type.GetHashCode () ^ _ts_value.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}

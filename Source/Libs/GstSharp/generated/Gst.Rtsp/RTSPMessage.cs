// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Rtsp {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class RTSPMessage : GLib.Opaque {

		public Gst.Rtsp.RTSPMsgType Type {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset("type"));
					return (Gst.Rtsp.RTSPMsgType) (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset("type"));
					*raw_ptr = (int) value;
				}
			}
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_add_header(IntPtr raw, int field, IntPtr value);

		public Gst.Rtsp.RTSPResult AddHeader(Gst.Rtsp.RTSPHeaderField field, string value) {
			IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
			int raw_ret = gst_rtsp_message_add_header(Handle, (int) field, native_value);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			GLib.Marshaller.Free (native_value);
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_add_header_by_name(IntPtr raw, IntPtr header, IntPtr value);

		public Gst.Rtsp.RTSPResult AddHeaderByName(string header, string value) {
			IntPtr native_header = GLib.Marshaller.StringToPtrGStrdup (header);
			IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
			int raw_ret = gst_rtsp_message_add_header_by_name(Handle, native_header, native_value);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			GLib.Marshaller.Free (native_header);
			GLib.Marshaller.Free (native_value);
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_append_headers(IntPtr raw, IntPtr str);

		public Gst.Rtsp.RTSPResult AppendHeaders(string str) {
			int raw_ret = gst_rtsp_message_append_headers(Handle, new GLib.GString (str).Handle);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_dump(IntPtr raw);

		public Gst.Rtsp.RTSPResult Dump() {
			int raw_ret = gst_rtsp_message_dump(Handle);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_free(IntPtr raw);

		public Gst.Rtsp.RTSPResult Free() {
			int raw_ret = gst_rtsp_message_free(Handle);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_get_header(IntPtr raw, int field, out IntPtr value, int indx);

		public Gst.Rtsp.RTSPResult GetHeader(Gst.Rtsp.RTSPHeaderField field, out string value, int indx) {
			IntPtr native_value;
			int raw_ret = gst_rtsp_message_get_header(Handle, (int) field, out native_value, indx);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			value = GLib.Marshaller.Utf8PtrToString (native_value);
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_get_header_by_name(IntPtr raw, IntPtr header, out IntPtr value, int index);

		public Gst.Rtsp.RTSPResult GetHeaderByName(string header, out string value, int index) {
			IntPtr native_header = GLib.Marshaller.StringToPtrGStrdup (header);
			IntPtr native_value;
			int raw_ret = gst_rtsp_message_get_header_by_name(Handle, native_header, out native_value, index);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			GLib.Marshaller.Free (native_header);
			value = GLib.Marshaller.Utf8PtrToString (native_value);
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_get_type(IntPtr raw);

		public Gst.Rtsp.RTSPMsgType GType { 
			get {
				int raw_ret = gst_rtsp_message_get_type(Handle);
				Gst.Rtsp.RTSPMsgType ret = (Gst.Rtsp.RTSPMsgType) raw_ret;
				return ret;
			}
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_init(IntPtr raw);

		public Gst.Rtsp.RTSPResult Init() {
			int raw_ret = gst_rtsp_message_init(Handle);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_init_data(IntPtr raw, byte channel);

		public Gst.Rtsp.RTSPResult InitData(byte channel) {
			int raw_ret = gst_rtsp_message_init_data(Handle, channel);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_init_request(IntPtr raw, int method, IntPtr uri);

		public Gst.Rtsp.RTSPResult InitRequest(Gst.Rtsp.RTSPMethod method, string uri) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			int raw_ret = gst_rtsp_message_init_request(Handle, (int) method, native_uri);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			GLib.Marshaller.Free (native_uri);
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_init_response(IntPtr raw, int code, IntPtr reason, IntPtr request);

		public Gst.Rtsp.RTSPResult InitResponse(Gst.Rtsp.RTSPStatusCode code, string reason, Gst.Rtsp.RTSPMessage request) {
			IntPtr native_reason = GLib.Marshaller.StringToPtrGStrdup (reason);
			int raw_ret = gst_rtsp_message_init_response(Handle, (int) code, native_reason, request == null ? IntPtr.Zero : request.Handle);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			GLib.Marshaller.Free (native_reason);
			return ret;
		}

		public Gst.Rtsp.RTSPResult InitResponse(Gst.Rtsp.RTSPStatusCode code) {
			return InitResponse (code, null, null);
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_rtsp_message_parse_auth_credentials(IntPtr raw, int field);

		public Gst.Rtsp.RTSPAuthCredential ParseAuthCredentials(Gst.Rtsp.RTSPHeaderField field) {
			IntPtr raw_ret = gst_rtsp_message_parse_auth_credentials(Handle, (int) field);
			Gst.Rtsp.RTSPAuthCredential ret = Gst.Rtsp.RTSPAuthCredential.New (raw_ret);
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_parse_data(IntPtr raw, out byte channel);

		public Gst.Rtsp.RTSPResult ParseData(out byte channel) {
			int raw_ret = gst_rtsp_message_parse_data(Handle, out channel);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_parse_request(IntPtr raw, out int method, out IntPtr uri, out int version);

		public Gst.Rtsp.RTSPResult ParseRequest(out Gst.Rtsp.RTSPMethod method, out string uri, out Gst.Rtsp.RTSPVersion version) {
			int native_method;
			IntPtr native_uri;
			int native_version;
			int raw_ret = gst_rtsp_message_parse_request(Handle, out native_method, out native_uri, out native_version);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			method = (Gst.Rtsp.RTSPMethod) native_method;
			uri = GLib.Marshaller.PtrToStringGFree(native_uri);
			version = (Gst.Rtsp.RTSPVersion) native_version;
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_parse_response(IntPtr raw, out int code, out IntPtr reason, out int version);

		public Gst.Rtsp.RTSPResult ParseResponse(out Gst.Rtsp.RTSPStatusCode code, out string reason, out Gst.Rtsp.RTSPVersion version) {
			int native_code;
			IntPtr native_reason;
			int native_version;
			int raw_ret = gst_rtsp_message_parse_response(Handle, out native_code, out native_reason, out native_version);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			code = (Gst.Rtsp.RTSPStatusCode) native_code;
			reason = GLib.Marshaller.PtrToStringGFree(native_reason);
			version = (Gst.Rtsp.RTSPVersion) native_version;
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_remove_header(IntPtr raw, int field, int indx);

		public Gst.Rtsp.RTSPResult RemoveHeader(Gst.Rtsp.RTSPHeaderField field, int indx) {
			int raw_ret = gst_rtsp_message_remove_header(Handle, (int) field, indx);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_remove_header_by_name(IntPtr raw, IntPtr header, int index);

		public Gst.Rtsp.RTSPResult RemoveHeaderByName(string header, int index) {
			IntPtr native_header = GLib.Marshaller.StringToPtrGStrdup (header);
			int raw_ret = gst_rtsp_message_remove_header_by_name(Handle, native_header, index);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			GLib.Marshaller.Free (native_header);
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_set_body(IntPtr raw, byte[] data, uint size);

		public Gst.Rtsp.RTSPResult SetBody(byte[] data, uint size) {
			int raw_ret = gst_rtsp_message_set_body(Handle, data, size);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_take_body(IntPtr raw, byte[] data, uint size);

		public Gst.Rtsp.RTSPResult TakeBody(byte[] data, uint size) {
			int raw_ret = gst_rtsp_message_take_body(Handle, data, size);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_take_header(IntPtr raw, int field, IntPtr value);

		public Gst.Rtsp.RTSPResult TakeHeader(Gst.Rtsp.RTSPHeaderField field, string value) {
			int raw_ret = gst_rtsp_message_take_header(Handle, (int) field, GLib.Marshaller.StringToPtrGStrdup(value));
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_take_header_by_name(IntPtr raw, IntPtr header, IntPtr value);

		public Gst.Rtsp.RTSPResult TakeHeaderByName(string header, string value) {
			IntPtr native_header = GLib.Marshaller.StringToPtrGStrdup (header);
			int raw_ret = gst_rtsp_message_take_header_by_name(Handle, native_header, GLib.Marshaller.StringToPtrGStrdup(value));
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			GLib.Marshaller.Free (native_header);
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_unset(IntPtr raw);

		public Gst.Rtsp.RTSPResult Unset() {
			int raw_ret = gst_rtsp_message_unset(Handle);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_new(out IntPtr msg);

		public static Gst.Rtsp.RTSPResult New(out Gst.Rtsp.RTSPMessage msg) {
			IntPtr native_msg;
			int raw_ret = gst_rtsp_message_new(out native_msg);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			msg = native_msg == IntPtr.Zero ? null : (Gst.Rtsp.RTSPMessage) GLib.Opaque.GetOpaque (native_msg, typeof (Gst.Rtsp.RTSPMessage), true);
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_new_data(out IntPtr msg, byte channel);

		public static Gst.Rtsp.RTSPResult NewData(out Gst.Rtsp.RTSPMessage msg, byte channel) {
			IntPtr native_msg;
			int raw_ret = gst_rtsp_message_new_data(out native_msg, channel);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			msg = native_msg == IntPtr.Zero ? null : (Gst.Rtsp.RTSPMessage) GLib.Opaque.GetOpaque (native_msg, typeof (Gst.Rtsp.RTSPMessage), true);
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_new_request(out IntPtr msg, int method, IntPtr uri);

		public static Gst.Rtsp.RTSPResult NewRequest(out Gst.Rtsp.RTSPMessage msg, Gst.Rtsp.RTSPMethod method, string uri) {
			IntPtr native_msg;
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			int raw_ret = gst_rtsp_message_new_request(out native_msg, (int) method, native_uri);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			msg = native_msg == IntPtr.Zero ? null : (Gst.Rtsp.RTSPMessage) GLib.Opaque.GetOpaque (native_msg, typeof (Gst.Rtsp.RTSPMessage), true);
			GLib.Marshaller.Free (native_uri);
			return ret;
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_message_new_response(out IntPtr msg, int code, IntPtr reason, IntPtr request);

		public static Gst.Rtsp.RTSPResult NewResponse(out Gst.Rtsp.RTSPMessage msg, Gst.Rtsp.RTSPStatusCode code, string reason, Gst.Rtsp.RTSPMessage request) {
			IntPtr native_msg;
			IntPtr native_reason = GLib.Marshaller.StringToPtrGStrdup (reason);
			int raw_ret = gst_rtsp_message_new_response(out native_msg, (int) code, native_reason, request == null ? IntPtr.Zero : request.Handle);
			Gst.Rtsp.RTSPResult ret = (Gst.Rtsp.RTSPResult) raw_ret;
			msg = native_msg == IntPtr.Zero ? null : (Gst.Rtsp.RTSPMessage) GLib.Opaque.GetOpaque (native_msg, typeof (Gst.Rtsp.RTSPMessage), true);
			GLib.Marshaller.Free (native_reason);
			return ret;
		}

		public static Gst.Rtsp.RTSPResult NewResponse(out Gst.Rtsp.RTSPMessage msg, Gst.Rtsp.RTSPStatusCode code) {
			return NewResponse (out msg, code, null, null);
		}

		public RTSPMessage(IntPtr raw) : base(raw) {}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("type"
							, 0
							, (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(Gst.Rtsp.RTSPMsgType))) // type
							, null
							, "type_data"
							, (long) Marshal.OffsetOf(typeof(GstRTSPMessage_typeAlign), "type")
							, 0
							),
						// union struct type_data.request
							new GLib.AbiField("type_data.request.method"
								, -1
								, (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(Gst.Rtsp.RTSPMethod))) // type_data.request.method
								, "type"
								, "type_data.request.uri"
								, (long) Marshal.OffsetOf(typeof(GstRTSPMessage_type_data_request_methodAlign), "type_data_request_method")
								, 0
								),
							new GLib.AbiField("type_data.request.uri"
								, -1
								, (uint) Marshal.SizeOf(typeof(IntPtr)) // type_data.request.uri
								, "type_data.request.method"
								, "type_data.request.version"
								, (uint) Marshal.SizeOf(typeof(IntPtr))
								, 0
								),
							new GLib.AbiField("type_data.request.version"
								, -1
								, (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(Gst.Rtsp.RTSPVersion))) // type_data.request.version
								, "type_data.request.uri"
								, null
								, (long) Marshal.OffsetOf(typeof(GstRTSPMessage_type_data_request_versionAlign), "type_data_request_version")
								, 0
								),
						// End type_data.request

						// union struct type_data.response
							new GLib.AbiField("type_data.response.code"
								, -1
								, (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(Gst.Rtsp.RTSPStatusCode))) // type_data.response.code
								, "type"
								, "type_data.response.reason"
								, (long) Marshal.OffsetOf(typeof(GstRTSPMessage_type_data_response_codeAlign), "type_data_response_code")
								, 0
								),
							new GLib.AbiField("type_data.response.reason"
								, -1
								, (uint) Marshal.SizeOf(typeof(IntPtr)) // type_data.response.reason
								, "type_data.response.code"
								, "type_data.response.version"
								, (uint) Marshal.SizeOf(typeof(IntPtr))
								, 0
								),
							new GLib.AbiField("type_data.response.version"
								, -1
								, (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(Gst.Rtsp.RTSPVersion))) // type_data.response.version
								, "type_data.response.reason"
								, null
								, (long) Marshal.OffsetOf(typeof(GstRTSPMessage_type_data_response_versionAlign), "type_data_response_version")
								, 0
								),
						// End type_data.response

						// union struct type_data.data
							new GLib.AbiField("type_data.data.channel"
								, -1
								, (uint) Marshal.SizeOf(typeof(byte)) // type_data.data.channel
								, "type"
								, null
								, (long) Marshal.OffsetOf(typeof(GstRTSPMessage_type_data_data_channelAlign), "type_data_data_channel")
								, 0
								),
						// End type_data.data

						new GLib.AbiField("type_data"
							, -1
							, new List<List<string>>() {  // union type_data
						new List<string>() {"type_data.request.method","type_data.request.uri","type_data.request.version"},
						new List<string>() {"type_data.response.code","type_data.response.reason","type_data.response.version"},
						new List<string>() {"type_data.data.channel"}
					  }
							, "type"
							, "hdr_fields"
							, 0
							),
						new GLib.AbiField("hdr_fields"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // hdr_fields
							, "type_data"
							, "body"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("body"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // body
							, "hdr_fields"
							, "body_size"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("body_size"
							, -1
							, (uint) Marshal.SizeOf(typeof(uint)) // body_size
							, "body"
							, "_gst_reserved"
							, (long) Marshal.OffsetOf(typeof(GstRTSPMessage_body_sizeAlign), "body_size")
							, 0
							),
						new GLib.AbiField("_gst_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _gst_reserved
							, "body_size"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstRTSPMessage_typeAlign
		{
			sbyte f1;
			private Gst.Rtsp.RTSPMsgType type;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstRTSPMessage_type_data_request_methodAlign
		{
			sbyte f1;
			private Gst.Rtsp.RTSPMethod type_data_request_method;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstRTSPMessage_type_data_request_versionAlign
		{
			sbyte f1;
			private Gst.Rtsp.RTSPVersion type_data_request_version;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstRTSPMessage_type_data_response_codeAlign
		{
			sbyte f1;
			private Gst.Rtsp.RTSPStatusCode type_data_response_code;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstRTSPMessage_type_data_response_versionAlign
		{
			sbyte f1;
			private Gst.Rtsp.RTSPVersion type_data_response_version;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstRTSPMessage_type_data_data_channelAlign
		{
			sbyte f1;
			private byte type_data_data_channel;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstRTSPMessage_body_sizeAlign
		{
			sbyte f1;
			private uint body_size;
		}


		// End of the ABI representation.

#endregion
	}
}
